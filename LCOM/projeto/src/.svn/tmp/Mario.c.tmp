# include "Mario.h"

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <minix/drivers.h>

#include <minix/sysutil.h>
#include <minix/syslib.h>
#include <minix/drivers.h>
#include <minix/driver.h>

#include <stdint.h>
#include <machine/int86.h>

#include "video_gr.h"
#include "kbd.h"

<<<<<<< .mine
=======

>>>>>>> .r113
Mario* createMario() {

	Mario* mario = (Mario*) malloc(sizeof(Mario));
	mario->kbd_irq = kbd_subscribe_int();
	printf("kbd_irq: %i \n",mario->kbd_irq);

	mario->timer_irq = timer_subscribe_int();
	printf("timer_irq: %i \n",mario->timer_irq);
	mario->done = 0;
	printf("mario_done: %i \n",mario->done);

	//mario->draw = 1;

	mario->scancode = 0;

	mario->x = 0;
	mario->y = 300;
	mario->size = 50;
	mario->timer = createTimer();

<<<<<<< .mine
	//mario->background = loadBitmap("/home/lcom/projeto/src/images/test_fundo.bmp");
=======
	mario->background = loadBitmap("/home/lcom/projeto-repo/src/images/mario3.bmp");
>>>>>>> .r113

	return mario;

}

void updateMario(Mario* mario) {
<<<<<<< .mine
	int ipc_status, r = 0;
	message msg;
	int* a = 0;

	if (driver_receive(ANY, &msg, &ipc_status) != 0)
		return;
=======
	
	unsigned int maxHeight = getYResolution()/200;
	int newy = mario->y + 1;
>>>>>>> .r113

<<<<<<< .mine
	if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0) {
		printf("driver_receive failed with: %d\n", r);
		return;
	}
	if (is_ipc_notify(ipc_status)) {
		switch (_ENDPOINT_P(msg.m_source)) {
		case HARDWARE:
			if (msg.NOTIFY_ARG & mario->kbd_irq) {
				mario->scancode = kbd_handler_scan();
				printf("timer tick \n");
				printf("tecla premida %x \n", mario->scancode);
				print_code(mario->scancode, 0);
			}

			if (msg.NOTIFY_ARG & mario->timer_irq) {
				timerHandler(mario->timer);
			}

			break;
		default:
			break;
		}
	}
=======
	if (newy < maxHeight)
		mario->y = newy;
}
>>>>>>> .r113

<<<<<<< .mine
=======
void jump(Mario* mario) {
	
}

>>>>>>> .r113
<<<<<<< .mine
	if (mario->scancode == KEY_ESC)
		mario->done = 1;
	else if (mario->scancode == KEY_W) {
		mario->y -= 12;
=======
void updateMarioKbd(Mario* mario) {
>>>>>>> .r113

<<<<<<< .mine
	}
=======
	unsigned int h_res = getXResolution();
	
	if (mario->scancode == 0x4D && mario->x < (h_res - 20 - mario->size)) //right arrow key
	{
		mario->x += 20;
	}
>>>>>>> .r113

<<<<<<< .mine
	if (mario->timer->counter % 30 == 0) {
		mario->x += 60;
		printf("timer tick \n");
=======
	if (mario->scancode == 0x4B && mario->x > 20) //left arrow key
	{
		mario->x -= 20;
>>>>>>> .r113
	}

}


void drawMario(Mario* mario) {
	//clear_screen(5);
	//draw_square(mario->x, mario->y, mario->size, 2);
	printf("drawMario scancode : %x \n",mario->scancode);

<<<<<<< .mine

	//drawBitmap(mario->background, 0, 0, ALIGN_LEFT);
=======
	drawBitmap(mario->background, mario->x, mario->y, ALIGN_LEFT);
>>>>>>> .r113

}

void deleteMario(Mario* mario) {
	kbd_unsubscribe_int();
	timer_unsubscribe_int();
	deleteTimer(mario->timer);
	free(mario);
}

